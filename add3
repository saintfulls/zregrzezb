_G.NowLoaded = false

function LoadScript(isPremium)
    local Emojis = loadstring(game:HttpGet("https://raw.githubusercontent.com/Odrexyo/main/main/UI/Emojis.lua", true))()
    local LogoLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/Vernyfx/Logos/main/Main"))().Logos

    local ScriptVersion = "2.0"

    local Rayfield = loadstring(game:HttpGet("https://raw.githubusercontent.com/Gfgsbe63j/9dlao4c3b/main/rayfield"))()

    local ModeText

    if not isPremium then
        ModeText = " [<font color='#f0f0f0'>Normal</font>]"
    else
        ModeText = " [<font color='#ecd032'>Premium</font>]"
    end
    local HttpService = game:GetService('HttpService')
    local Window = Rayfield:CreateWindow({
        Name = "FNTD v" .. ScriptVersion .. ModeText .. " " .. Emojis.verified,
        Image = "10734951367",
        Quote = "Always High Quality!",
        LoadingTitle = "FNTD",
        LoadingSubtitle = "by Wing Hub",
        ConfigurationSaving = {
            Enabled = true,
            FolderName = "WingHub/" .. game.Players.LocalPlayer.Name .. "/FNTD", -- Create a custom folder for your hub/game
            FileName = "Settings"
        },
        Discord = {
            Enabled = true,
            Invite = "2MDPsA8WWs", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
            RememberJoins = true -- Set this to false to make them join the discord every time they load it up
        }
    })

    local Tabs = {
        Main = Window:CreateTab({"Main", "home"}),
        Summon = Window:CreateTab({"Summon", "shopping-bag"}),
        Macro = Window:CreateTab({"Macro", "mouse-pointer-2"}),
        MacroMaps = Window:CreateTab({"Macro Maps", "map"}),
        Webhook = Window:CreateTab({"Webhook", "mail"}),
        Misc = Window:CreateTab({"Misc", "globe"})
        -- Settings = Window:CreateTab("Settings", tonumber(LogoLibrary["settings"])),
    }

    -- Init

    -- >> Settings

    _G.Settings = {
        Priorities = { -- the higher the number is, the more it is prioritised
            ["Story"] = 1,
            ["Summon"] = 2
        },

        MacroMaps = {},
        SelectedMacro = "",
        MacroPlaying = false,
        MacroRecording = false,
        NextGame = false,
        ReplayGame = false,
        StepDelay = 3,
        StartDelay = 3,
        MacroName = ""

    }

    local Macros = {}

    local player = game:GetService("Players").LocalPlayer

    local startTime
    local startTimeOffset

    local Event = game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Towers")

    local LPH_NO_VIRTUALIZE

    if not LPH_OBFUSCATED then
        LPH_NO_VIRTUALIZE = function(...)
            return (...)
        end;
    end

    if not isfolder("WingHub/" .. player.Name) then
        makefolder("WingHub/" .. player.Name)
    end

    local MainFolder = "WingHub/" .. player.Name

    if not isfolder(MainFolder .. "/FNTD") then
        makefolder(MainFolder .. "/FNTD")
    end

    local GameFolder = MainFolder .. "/FNTD"

    if not isfolder(GameFolder .. "/Macros") then
        makefolder(GameFolder .. "/Macros")
    end

    local macroFolder = GameFolder .. "/Macros"

    if not isfolder(GameFolder .. "/Configs") then
        makefolder(GameFolder .. "/Configs")
    end

    local configFolder = GameFolder .. "/Configs"

    for _, file in pairs(listfiles(macroFolder)) do
        if not pcall(function()
            local json_content = game:GetService("HttpService"):JSONDecode(readfile(file))

            for k, v in pairs(json_content) do
                if Macros[k] ~= nil then
                    delfile(file)
                else
                    Macros[k] = v
                end
            end
        end) then
            print("Error reading file: " .. file)
        end
    end

    function refreshMacrosList()
        local MacrosList = listfiles(macroFolder)
        local items = {}

        for _, macro in ipairs(MacrosList) do
            local macroName = macro:match("([^/\\]+)%.%w+$")

            if macroName and not items[macroName] then
                items[macroName] = true
            end
        end

        local uniqueItems = {}
        for itemName in pairs(items) do
            table.insert(uniqueItems, itemName)
        end

        return uniqueItems
    end

    function CreateToggleShow()
        local UIL = {}

        -- Create ScreenGui and set properties
        UIL["Screen"] = Instance.new("ScreenGui", game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui"))
        UIL["Screen"].Name = "Screen"
        UIL["Screen"].ZIndexBehavior = Enum.ZIndexBehavior.Sibling
        UIL["Screen"].ResetOnSpawn = false
        UIL["Screen"].DisplayOrder = 1000000
        -- Create ImageButton and set properties
        UIL["ImageButton"] = Instance.new("ImageButton", UIL["Screen"])
        UIL["ImageButton"].BorderSizePixel = 0
        UIL["ImageButton"].ScaleType = Enum.ScaleType.Fit
        UIL["ImageButton"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        UIL["ImageButton"].AnchorPoint = Vector2.new(0.5, 0.5)
        UIL["ImageButton"].Size = UDim2.new(0.0521, 0, 0.0926, 0)
        UIL["ImageButton"].BorderColor3 = Color3.fromRGB(0, 0, 0)
        UIL["ImageButton"].Position = UDim2.new(0.5, 0, 0.04, 0)
        UIL["ImageButton"].BackgroundTransparency = 1

        -- Create Background Frame inside ImageButton and set properties
        UIL["BG"] = Instance.new("Frame", UIL["ImageButton"])
        UIL["BG"].BorderSizePixel = 0
        UIL["BG"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        UIL["BG"].AnchorPoint = Vector2.new(0.5, 0.5)
        UIL["BG"].Size = UDim2.new(1, 0, 1, 0)
        UIL["BG"].BorderColor3 = Color3.fromRGB(0, 0, 0)
        UIL["BG"].Position = UDim2.new(0.5, 0, 0.5, 0)
        UIL["BG"].Name = "BG"

        -- Add UIGradient to BG
        UIL["UIGradient"] = Instance.new("UIGradient", UIL["BG"])
        UIL["UIGradient"].Color = ColorSequence.new {ColorSequenceKeypoint.new(0, Color3.fromRGB(157, 140, 255)),
                                                     ColorSequenceKeypoint.new(1, Color3.fromRGB(147, 176, 255))}

        -- Add UICorner to BG
        UIL["UICorner_BG"] = Instance.new("UICorner", UIL["BG"])
        UIL["UICorner_BG"].CornerRadius = UDim.new(0.1, 0)

        -- Add UIStroke to BG
        UIL["UIStroke_BG"] = Instance.new("UIStroke", UIL["BG"])
        UIL["UIStroke_BG"].Color = Color3.fromRGB(56, 0, 84)
        UIL["UIStroke_BG"].Thickness = 3

        -- Add UICorner to ImageButton
        UIL["UICorner_ImageButton"] = Instance.new("UICorner", UIL["ImageButton"])
        UIL["UICorner_ImageButton"].CornerRadius = UDim.new(0.1, 0)

        -- Create TextLabel inside ImageButton and set properties
        UIL["TextLabel"] = Instance.new("TextLabel", UIL["ImageButton"])
        UIL["TextLabel"].TextWrapped = true
        UIL["TextLabel"].BorderSizePixel = 0
        UIL["TextLabel"].TextScaled = true
        UIL["TextLabel"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        UIL["TextLabel"].FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.Bold,
            Enum.FontStyle.Normal)
        UIL["TextLabel"].TextSize = 14
        UIL["TextLabel"].TextColor3 = Color3.fromRGB(255, 255, 255)
        UIL["TextLabel"].AnchorPoint = Vector2.new(0.5, 0.5)
        UIL["TextLabel"].Size = UDim2.new(0.6961, 0, 0.6961, 0)
        UIL["TextLabel"].BorderColor3 = Color3.fromRGB(0, 0, 0)
        UIL["TextLabel"].Text = "WING HUB"
        UIL["TextLabel"].BackgroundTransparency = 1
        UIL["TextLabel"].Position = UDim2.new(0.5, 0, 0.5, 0)

        -- Add UIStroke to TextLabel
        UIL["UIStroke_TextLabel"] = Instance.new("UIStroke", UIL["TextLabel"])
        UIL["UIStroke_TextLabel"].Color = Color3.fromRGB(32, 32, 32)
        UIL["UIStroke_TextLabel"].Thickness = 3

        return UIL["Screen"]
    end

    function stringToCFrame(input)
        return CFrame.new(unpack(game:GetService("HttpService"):JSONDecode("[" .. input .. "]")))
    end

    if not game.Players.LocalPlayer.PlayerGui:FindFirstChild("Screen") then
        CreateToggleShow()
    else
        game.Players.LocalPlayer.PlayerGui:FindFirstChild("Screen"):Destroy()
        CreateToggleShow()
    end

    local ToggleButton = game.Players.LocalPlayer.PlayerGui.Screen.ImageButton

    ToggleButton.MouseButton1Click:Connect(function()
        local UI

        for i, v in pairs(game:GetService("Players").LocalPlayer.PlayerGui:GetChildren()) do
            if v.Name == "Rayfield" then
                UI = v
            end
        end

        task.wait()
        UI.Enabled = not UI.Enabled
    end)

    local StartLoad = tick()

    -- Custom UI Functions

    function CreateSection(Tab, Name)
        local Tab = Tabs[Tab]
        return Tab:CreateSection(Name)
    end

    local Toggles = {}
    _G.SF = {}
    local insertedNumbers = {}

    function CreateToggle(Tab, Name, SettingsValue, DoFunction, DontSpawn, DoAfterDestroy)
        local Tab = Tabs[Tab]

        local ToggleNum = #Toggles + 1
        local randomNum = 0
        table.insert(Toggles, ToggleNum)

        repeat

            randomNum = math.random(55, 22222)
            task.wait(.01)

        until not table.find(insertedNumbers, randomNum)

        table.insert(insertedNumbers, randomNum)

        local Toggle = Tab:CreateToggle({
            Name = Name,
            CurrentValue = _G.Settings[SettingsValue],
            Flag = SettingsValue, -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
            Callback = function(Value)
                _G.Settings[SettingsValue] = Value

                if not _G.SF[randomNum] and _G.Settings[SettingsValue] then

                    _G.SF[randomNum] = true

                    if not DontSpawn then

                        local ab = task.spawn(DoFunction)

                        repeat
                            task.wait(.1)
                        until not _G.Settings[SettingsValue]

                        task.cancel(ab)

                        _G.SF[randomNum] = false

                        if DoAfterDestroy then
                            task.spawn(DoAfterDestroy)
                        end

                    end

                end
            end
        })

        return Toggle
    end

    function CreateDropdown(Tab, Name, Description, Options, Multi, SettingsValue, DoFunction, Function)
        local Curr

        if Multi then
            Curr = {}
        else
            Curr = ""
        end

        local Tab = Tabs[Tab]
        local Dropdown = Tab:CreateDropdown({
            Name = Name,
            Description = Description,
            Options = Options,
            CurrentOption = Curr,
            MultipleOptions = Multi,
            Flag = SettingsValue, -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
            Callback = function(Option)
                _G.Settings[SettingsValue] = Option

                if DoFunction then
                    task.spawn(Function)
                end
            end
        })

        return Dropdown
    end

    function CreateInput(Tab, Name, PlaceholderText, SettingsValue, DoFunction, Function)
        local Tab = Tabs[Tab]
        local Input = Tab:CreateInput({
            Name = Name,
            PlaceholderText = PlaceholderText,
            RemoveTextAfterFocusLost = false,
            Callback = function(Text)
                _G.Settings[SettingsValue] = Text

                if DoFunction then
                    task.spawn(Function)
                end
            end
        })

        return Input
    end

    function CreateButton(Tab, Name, Function)
        local Tab = Tabs[Tab]
        local Button = Tab:CreateButton({
            Name = Name,
            Callback = function()
                task.spawn(Function)
            end
        })

        return Button
    end

    function CreateSlider(Tab, Name, OptionsTable, Suffix, SettingsValue, DoFunction, Function)
        local Tab = Tabs[Tab]
        local Slider = Tab:CreateSlider({
            Name = Name,
            Range = {OptionsTable["Min"], OptionsTable["Max"]},
            Increment = OptionsTable["Increment"],
            Suffix = Suffix,
            CurrentValue = OptionsTable["Default"],
            Flag = SettingsValue, -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
            Callback = function(Value)
                _G.Settings[SettingsValue] = Value

                if DoFunction then
                    task.spawn(Function)
                end
            end
        })

        return Slider
    end

    function CreateLabel(Tab, Name)
        local Tab = Tabs[Tab]
        local Label = Tab:CreateLabel(Name)

        return Label
    end

    function CreateParagraph(Tab, Name, Description)
        local Tab = Tabs[Tab]
        local Paragraph = Tab:CreateParagraph({
            Title = Name,
            Content = Description
        })

        return Paragraph
    end

    function CreateNotification(Name, Description, Time)
        return Rayfield:Notify({
            Title = Name,
            Content = Description,
            Duration = Time,
            Image = 10709753064
        })
    end

    function timeElapsed()
        if startTime == nil then
            return -10
        else
            return (os.time() - startTime) + (startTimeOffset - startTime)
        end
    end

    local function StartMacroTimer()

        if player.PlayerGui.GameSelection.GameSelectionFrame ~= nil or
            player.PlayerGui.GameSelection.EndlessGameSelection ~= nil then
            return
        end
        repeat
            task.wait()
        until not player.PlayerGui.GameSelection.GameSelectionFrame.Visible or
            not player.PlayerGui.GameSelection.EndlessGameSelection.Visible

        if not player.PlayerGui.GameSelection.GameSelectionFrame.Visible or
            not player.PlayerGui.GameSelection.EndlessGameSelection.Visible then
            startTime = os.time()
            startTimeOffset = os.time()

        end

    end

    function SaveMacros()
        for profile_name, macro_table in pairs(Macros) do
            local save_data = {}
            save_data[profile_name] = macro_table
            writefile(macroFolder .. "/" .. profile_name .. ".json",
                game:GetService("HttpService"):JSONEncode(save_data))
        end
    end

    function Save()
        writefile(GameFolder .. "/" .. "Settings.json", game:GetService("HttpService"):JSONEncode(_G.Settings))
        SaveMacros()
    end

    function GetMoney()
        return player.Money.Value
    end

    function MacroPlayback()
        -- check if its in game first or not and if money exists.
        repeat
            task.wait()
        until game.Players.LocalPlayer:FindFirstChild("Money") ~= nil

        -- sort recorded macro before using it.
        table.sort(Macros[_G.Settings.SelectedMacro], function(a, b)
            return a[1] < b[1]
        end)

        for _, v in pairs(Macros[_G.Settings.SelectedMacro]) do
            local time = v[1]
            local remote_arguments = v[2]
            local money = v[3]

            -- money tracking (to be removed)
            if money ~= nil then
                repeat
                    task.wait()
                until GetMoney() >= money
            end

            repeat
                task.wait()
                -- if action happened before wave started, can execute all at once.
            until timeElapsed() >= time or time < 0

            if not JSON.macro_playback then
                return
            end

            local action = v[4]
            local parameters = remote_arguments

            if action == "SummonTower" then
                local args = {
                    [1] = parameters[1],
                    [2] = stringToCFrame(parameters[2])
                }

                game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Towers"):WaitForChild(
                    "SummonTower"):FireServer(unpack(args))
            end

            if action == "Sell" then
                function getNil(name, class)
                    for _, v in next, getnilinstances() do
                        if v.ClassName == class and v.Name == name then
                            return v;
                        end
                    end
                end

                local args = {}
            end

            if (action == "VoteWaveConfirm" and JSON.macro_skipwave) then
                task.spawn(function()
                    repeat
                        task.wait()
                    until game.Players.LocalPlayer.PlayerGui.HUD.ModeVoteFrame.Visible

                    local args = {
                        [1] = action
                    }

                    game:GetService("ReplicatedStorage").Remotes.Input:FireServer(unpack(args))
                end)
            end

            task.wait(0.24)
        end
    end

    local game_metatable = getrawmetatable(game)
    local namecall_original = game_metatable.__namecall

    setreadonly(game_metatable, false)

    game_metatable.__namecall = newcclosure(function(self, ...)
        local method = getnamecallmethod()
        local script = getcallingscript()

        local Args = {...}

        if Args ~= nil and (method == "FireServer" or method == "InvokeServer") then
            if _G.Settings.MacroRecording and not _G.Settings.MacroPlaying then

                repeat
                    task.wait()
                until player.Money ~= nil
                repeat
                    task.wait()
                until not player.PlayerGui.GameSelection.GameSelectionFrame.Visible or
                    not player.PlayerGui.GameSelection.EndlessGameSelection.Visible
                local money = nil

                money = GetMoney()
                if self.Name ~= "StopSetting" then
                    if self.Name == "Sell" then
                        table.insert(Macros[_G.Settings.SelectedMacro], {
                            [1] = timeElapsed(),
                            [2] = {
                                [1] = Args[1]

                            },
                            [3] = money,
                            [4] = self.Name
                        })
                    end
                    if self.Name == "SkipWave" then
                        table.insert(Macros[_G.Settings.SelectedMacro], {
                            [1] = timeElapsed(),
                            [2] = {
                                [1] = Args[1],
                                [2] = Args[2]

                            },
                            [3] = money,
                            [4] = self.Name
                        })
                    end
                    if self.Name == "SummonTower" then
                        table.insert(Macros[_G.Settings.SelectedMacro], {
                            [1] = timeElapsed(),
                            [2] = {
                                [1] = Args[1],
                                [2] = tostring(Args[2])

                            },
                            [3] = money
                        })
                    end
                    if self.Name == "Upgrade" then

                        table.insert(Macros[_G.Settings.SelectedMacro], {
                            [1] = timeElapsed(),
                            [2] = {
                                [1] = tostring(Args[1])

                            },
                            [3] = money,
                            [4] = self.Name
                        })
                    end

                    task.spawn(function()
                        Save()
                    end)
                end
            end
        end

        return namecall_original(self, ...)
    end)

    task.spawn(StartMacroTimer)

    local Maps = {"1", "2", "3"}

    local Levels = {"1", "2", "3", "4", "5", "6"}
    local MapDD = CreateDropdown("Main", "Map", "Select the map you will be playing", Maps, false, "SelectedMap", false)

    local LevelDD = CreateDropdown("Main", "Level", "Select the level you will be playing", Levels, false,
        "SelectedLevel", false)

    CreateToggle("Main", "Auto Join Map", "AutoJoin", function()
        while task.wait() do

        end
    end)
    local StartDelaySlide = CreateSlider("Main", "Auto Start Delay", {
        Min = 0,
        Max = 10,
        Increment = 1,
        Default = _G.Settings.StartDelay
    }, "seconds", "StartDelay", false)

    CreateToggle("Main", "Auto Start", "AutoStart", function()
        while task.wait() do
            if player.PlayerGui.GameSelection.GameSelectionFrame.Visible or
                player.PlayerGui.GameSelection.EndlessGameSelection.Visible then
                local args = {
                    [1] = _G.Settings.SelectedMap,
                    [2] = tonumber(_G.Settings.SelectedLevel),
                    [3] = 1
                }
            end
        end
    end)
    CreateSection("Main", "Game")

    CreateToggle("Main", "Auto Retry", "ReplayGame", function()

        while task.wait() do

        end
    end)

    CreateToggle("Main", "Auto Leave", "AutoLeave", function()

        while task.wait() do

        end
    end)

    CreateToggle("Main", "Auto Next", "AutoNext", function()

        while task.wait() do

        end

    end)

    -- [[// Summon Tab \\]] --

    -- [[// Macro Tab \\]] -- 

    CreateSection("Macro", "Config")

    local MacroDropdown = CreateDropdown("Macro", "Selected Macro", "The macro you'll use", refreshMacrosList(), false,
        "SelectedMacro", true, function()
            if Macros[_G.Settings.SelectedMacro] == nil then
                Macros[_G.Settings.SelectedMacro] = {}
            end
        end)

    CreateInput("Macro", "Macro Name", "Name", "MacroName", false)

    CreateButton("Macro", "Create Macro", function()
        writefile(macroFolder .. "/" .. _G.Settings.MacroName .. ".json", HttpService:JSONEncode({}))

        MacroDropdown:UpdateOptions(refreshMacrosList())
        MacroDropdown:Set(_G.Settings.MacroName)
        Macros[_G.Settings.SelectedMacro] = {}
    end)

    CreateButton("Macro", "Clear Macro", function()
        writefile(macroFolder .. "/" .. _G.Settings.SelectedMacro .. ".json", HttpService:JSONEncode({}))
    end)

    CreateButton("Macro", "Delete Macro", function()
        delfile(macroFolder .. "/" .. _G.Settings.SelectedMacro .. ".json")
        MacroDropdown:UpdateOptions(refreshMacrosList())
    end)

    CreateSection("Macro", "Macro")

    local RecordMacro = CreateToggle("Macro", "Record Macro", "MacroRecording", function()
        while task.wait() do

        end
    end)

    local PlayMacro = CreateToggle("Macro", "Playback Macro", "MacroPlaying", function()
        while task.wait() do
            MacroPlayback()
        end
    end)

    while true do
        if _G.Settings.MacroRecording then
            if _G.Settings.MacroPlaying then
                PlayMacro:Set(false)
            end
        end

        if _G.Settings.MacroPlaying then
            if _G.Settings.MacroRecording then
                RecordMacro:Set(false)
            end
        end
        wait()
    end

    -- [[// Misc Tab \\]] --

    CreateSection("Misc", "Main")

    CreateToggle("Misc", "Hide Name", "HideName", function()
        while task.wait(.25) do

            pcall(function()

                workspace[game.Players.LocalPlayer.Name].Head.PlayerBillboard.PlayerName.Text = "Lv. 999 | WH On Top"
                workspace[game.Players.LocalPlayer.Name].Head.PlayerBillboard.Tags.Text =
                    "<font color='#00FFFF'><b>[WH On Top]</b></font>"
                workspace[game.Players.LocalPlayer.Name].Head.PlayerBillboard.GuildImage:Destroy()

            end)

            task.wait(.125)

        end

    end)

    CreateSection("Misc", "Other")

    CreateToggle("Misc", "White Screen (3d rendering disable)", "disable3d", function()
        while task.wait(.25) do

            pcall(function()

                local Rendering = true

                if Rendering then

                    Rendering = false

                    game:GetService("RunService"):Set3dRenderingEnabled(false)

                    task.wait(2.5)

                end

            end)

            task.wait(.125)

        end

    end, nil, function()
        Rendering = true
        game:GetService("RunService"):Set3dRenderingEnabled(true)
    end)

    _G.Boosting = false

    CreateToggle("Misc", "FPS Booster", "fpsbooster", function()
        while task.wait(.25) do

            pcall(function()

                if not _G.Boosting then

                    local decalsyeeted = true -- Leaving this on makes games look shitty but the fps goes up by at least 20.
                    local g = game
                    local w = g.Workspace
                    local l = g.Lighting
                    local t = w.Terrain
                    sethiddenproperty(l, "Technology", 2)
                    sethiddenproperty(t, "Decoration", false)
                    t.WaterWaveSize = 0
                    t.WaterWaveSpeed = 0
                    t.WaterReflectance = 0
                    t.WaterTransparency = 0
                    l.GlobalShadows = 0
                    l.FogEnd = 9e9
                    l.Brightness = 0
                    settings().Rendering.QualityLevel = "Level01"
                    for i, v in pairs(w:GetDescendants()) do
                        if v:IsA("BasePart") and not v:IsA("MeshPart") then
                            v.Material = "Plastic"
                            v.Reflectance = 0
                        elseif (v:IsA("Decal") or v:IsA("Texture")) and decalsyeeted then
                            v.Transparency = 1
                        elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
                            v.Lifetime = NumberRange.new(0)
                        elseif v:IsA("Explosion") then
                            v.BlastPressure = 1
                            v.BlastRadius = 1
                        elseif v:IsA("Fire") or v:IsA("SpotLight") or v:IsA("Smoke") or v:IsA("Sparkles") then
                            v.Enabled = false
                        elseif v:IsA("MeshPart") and decalsyeeted then
                            v.Material = "Plastic"
                            v.Reflectance = 0
                            v.TextureID = 10385902758728957
                        elseif v:IsA("SpecialMesh") and decalsyeeted then
                            v.TextureId = 0
                        elseif v:IsA("ShirtGraphic") and decalsyeeted then
                            v.Graphic = 0
                        elseif (v:IsA("Shirt") or v:IsA("Pants")) and decalsyeeted then
                            v[v.ClassName .. "Template"] = 0
                        end
                    end
                    for i = 1, #l:GetChildren() do
                        e = l:GetChildren()[i]
                        if e:IsA("BlurEffect") or e:IsA("SunRaysEffect") or e:IsA("ColorCorrectionEffect") or
                            e:IsA("BloomEffect") or e:IsA("DepthOfFieldEffect") then
                            e.Enabled = false
                        end
                    end
                    w.DescendantAdded:Connect(function(v)
                        task.wait() -- prevent errors and shit
                        if v:IsA("BasePart") and not v:IsA("MeshPart") then
                            v.Material = "Plastic"
                            v.Reflectance = 0
                        elseif v:IsA("Decal") or v:IsA("Texture") and decalsyeeted then
                            v.Transparency = 1
                        elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
                            v.Lifetime = NumberRange.new(0)
                        elseif v:IsA("Explosion") then
                            v.BlastPressure = 1
                            v.BlastRadius = 1
                        elseif v:IsA("Fire") or v:IsA("SpotLight") or v:IsA("Smoke") or v:IsA("Sparkles") then
                            v.Enabled = false
                        elseif v:IsA("MeshPart") and decalsyeeted then
                            v.Material = "Plastic"
                            v.Reflectance = 0
                            v.TextureID = 10385902758728957
                        elseif v:IsA("SpecialMesh") and decalsyeeted then
                            v.TextureId = 0
                        elseif v:IsA("ShirtGraphic") and decalsyeeted then
                            v.ShirtGraphic = 0
                        elseif (v:IsA("Shirt") or v:IsA("Pants")) and decalsyeeted then
                            v[v.ClassName .. "Template"] = 0
                        end
                    end)

                    _G.Boosting = true

                end

            end)

            task.wait(.125)

        end

    end)

    CreateToggle("Misc", "Auto Hide UI On Loadup", "HideUIOnLoadup", nil, true)

    CreateSection("Misc", "Information")

    function hoursMinsSeconds(n)
        local hours = math.floor(n / 3600)
        local remaining = n % 3600
        local minutes = math.floor(remaining / 60)
        remaining = remaining % 60
        local seconds = remaining
        if hours < 10 then
            hours = "0" .. tostring(hours)
        end
        if minutes < 10 then
            minutes = "0" .. tostring(minutes)
        end
        if seconds < 10 then
            seconds = "0" .. tostring(seconds)
        end

        return hours .. ":" .. minutes .. ":" .. seconds
    end

    local InformationTemplate = {""}

    local InfoParagraph = CreateParagraph("Misc", "Client Information", table.concat(InformationTemplate, "\n"))

    task.spawn(function()
        while task.wait(1) do
            pcall(function()
                local InformationText = {"Timer: " .. hoursMinsSeconds(math.floor(tick() - StartLoad + 0.5)),
                                         "FPS: " .. tostring(workspace:GetRealPhysicsFPS())}

                InfoParagraph:Set({
                    Title = "Client Information",
                    Content = table.concat(InformationText, "\n")
                })
            end)
        end
    end)

    Rayfield:LoadConfiguration()
    Save()
    task.wait(2)
    _G.NowLoaded = true
    CreateNotification("Loaded!", "Wing Hub has loaded in " .. tick() - StartLoad .. " seconds.", 5)
    task.wait(1)
    if _G.Settings.HideUIOnLoadup then
        local UI

        for i, v in pairs(game:GetService("Players").LocalPlayer.PlayerGui:GetChildren()) do
            if v.Name == "Rayfield" then
                UI = v
            end
        end

        task.wait()
        UI.Enabled = not UI.Enabled
    end

    --
    local vu = game:GetService("VirtualUser")
    game:GetService("Players").LocalPlayer.Idled:connect(function()
        vu:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
        wait(1)
        vu:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
    end)
    --

end

LoadScript(true)
