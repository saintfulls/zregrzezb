for _, v in pairs(getconnections(game.Players.LocalPlayer.Idled)) do
    v:Disable()
end

repeat
    task.wait()
until game.CoreGui:FindFirstChild("RobloxPromptGui")

local po, ts = game.CoreGui.RobloxPromptGui.promptOverlay, game:GetService("TeleportService")

local teleportOnFailed = po.ChildAdded:Connect(function(a)
    if a.Name == "ErrorPrompt" then
        repeat
            ts:Teleport(game.GameId)
            task.wait(1)
        until false
    end
end)

local DefaultSettings = {
    macro_profile = "Default Profile",
    macro_sell = true,
    macro_changepriority = true,
    macro_upgrade = true,
    macro_summon = true,
    macro_record = false,
    macro_playback = false,
    auto_join_game = false,
    auto_join_level = 1,
    auto_join_story_level = 1,
    auto_next_story = false,
    auto_join_delay = 10,
    auto_2x = false,
    auto_join_increment_story = false,
    auto_start_game = false,
    auto_join_mode = "Story",
    auto_replay = false,
}

if not isfolder("SapphireHub") then
    makefolder("SapphireHub")
end
if not isfolder("SapphireHub/FNTD") then
    makefolder("SapphireHub/FNTD")
end
if not isfolder("SapphireHub/FNTD/Settings") then
    makefolder("SapphireHub/FNTD/Settings")
end

local SettingsFile = "SapphireHub/FNTD/Settings/" .. game.Players.LocalPlayer.UserId .. ".json"
local MacroDefaultSettings = {
    ["Default Profile"] = {}
}
local JSON, Macros, startTime, startTimeOffset
local folder_name = "SapphireHub/FNTD/" .. game.Players.LocalPlayer.UserId

if not pcall(function()
        readfile(SettingsFile)
    end) then
    writefile(SettingsFile, game:GetService("HttpService"):JSONEncode(DefaultSettings))
end

Macros = {}

if not isfolder(folder_name) then
    makefolder(folder_name)
end

if #listfiles(folder_name) == 0 then
    writefile(folder_name .. "/" .. "Default Profile.json",
        game:GetService("HttpService"):JSONEncode(MacroDefaultSettings))
end

for _, file in pairs(listfiles(folder_name)) do
    if not pcall(function()
            local json_content = game:GetService("HttpService"):JSONDecode(readfile(file))

            for k, v in pairs(json_content) do
                if Macros[k] ~= nil then
                    delfile(file)
                else
                    Macros[k] = v
                end
            end
        end) then
        print("Error reading file: " .. file)
    end
end

if not pcall(function()
        JSON = game:GetService("HttpService"):JSONDecode(readfile(SettingsFile))
    end) then
    writefile(SettingsFile, game:GetService("HttpService"):JSONEncode(DefaultSettings))
    JSON = DefaultSettings
end

function SaveMacros()
    for profile_name, macro_table in pairs(Macros) do
        local save_data = {}
        save_data[profile_name] = macro_table
        writefile(folder_name .. "/" .. profile_name .. ".json", game:GetService("HttpService"):JSONEncode(save_data))
    end
end

function Save()
    writefile(SettingsFile, game:GetService("HttpService"):JSONEncode(JSON))
    SaveMacros()
end

Save()

for k, v in pairs(DefaultSettings) do
    if JSON[k] == nil then
        JSON[k] = v
    end
end



local player = game:GetService("Players").LocalPlayer

local Event = game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Towers")


function CFrameToTable(cframe)
    local position = cframe.Position
    local lookVector = cframe.LookVector
    local rightVector = cframe.RightVector

    local pitch = math.asin(-lookVector.Y)
    local yaw = math.atan2(lookVector.X, lookVector.Z)
    local roll = math.atan2(-rightVector.Y, rightVector.X)

    return {
        Position = { position.X, position.Y, position.Z },
        Angles = { pitch, yaw, roll }
    }
end

function TableToCFrame(cframeTable)
    local position = cframeTable.Position
    local angles = cframeTable.Angles

    local cframe = CFrame.new(position[1], position[2], position[3])
    cframe = cframe * CFrame.Angles(angles[1], angles[2], angles[3])

    return cframe
end

function StartMacroTimer()
    if player.PlayerGui.GameSelection.GameSelectionFrame ~= nil and
        player.PlayerGui.GameSelection.EndlessGameSelection ~= nil then
        return
    end

    repeat
        task.wait()
    until not player.PlayerGui.GameSelection.GameSelectionFrame.Visible and
        player.PlayerGui.GameSelection.EndlessGameSelection.Visible
    startTime = os.time()
    startTimeOffset = os.time()
    timeElapsed()
end

function GetMoney()
    return player.Money.Value
end

function MacroPlayback()
    repeat
        task.wait()
    until game.Players.LocalPlayer:FindFirstChild("Money") ~= nil

    if JSON.macro_record then
        return
    end
    
    table.sort(Macros[JSON.macro_profile], function(a, b)
        return a[1] < b[1]
    end)

    for _, v in pairs(Macros[JSON.macro_profile]) do
        local time = v[1]
        local remote_arguments = v[2]
        local money = v[3]

        if money ~= nil then
            repeat
                task.wait()
            until GetMoney() >= money
        end

        repeat
            task.wait()
        until timeElapsed() >= time or time < 0



        local action = v[4]
        local parameters = remote_arguments

        if action == "SummonTower" then
            local args = {
                [1] = parameters[1],
                [2] = TableToCFrame(parameters[2])
            }

            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Towers"):WaitForChild(
                "SummonTower"):FireServer(unpack(args))
        end

        if action == "Sell" then
            for _, unit in pairs(game:GetService("Workspace").Towers:GetChildren()) do
                if unit.Name == parameters[1] then
                    local magnitude = (unit.HumanoidRootPart.Position - TableToCFrame(parameters[2]).Position).magnitude
                    if magnitude == 0 then
                        local args = { unit }
                        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Towers"):WaitForChild(
                            "Sell"):FireServer(unpack(args))
                    end
                end
            end
        end

        if action == "Target" then
            for _, unit in pairs(game:GetService("Workspace").Towers:GetChildren()) do
                if unit.Name == parameters[1] then
                    local magnitude = (unit.HumanoidRootPart.Position - TableToCFrame(parameters[2]).Position).magnitude
                    if magnitude == 0 then
                        local args = { unit }
                        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Towers"):WaitForChild(
                            "Target"):FireServer(unpack(args))
                    end
                end
            end
        end

        if action == "Upgrade" then
            for _, unit in pairs(game:GetService("Workspace").Towers:GetChildren()) do
                if unit.Name == parameters[1] then
                    local magnitude = (unit.HumanoidRootPart.Position - TableToCFrame(parameters[2]).Position).magnitude
                    if magnitude == 0 then
                        local args = { unit }
                        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Towers"):WaitForChild(
                            "Upgrade"):FireServer(unpack(args))
                    end
                end
            end
        end



        task.wait(0.24)
    end
end

function timeElapsed()
    if startTime == nil then
        return -10
    else
        return (os.time() - startTime) + (startTimeOffset - startTime)
    end
end

function JoinGame()
    
end
local game_metatable = getrawmetatable(game)
local namecall_original = game_metatable.__namecall

setreadonly(game_metatable, false)

game_metatable.__namecall = newcclosure(function(self, ...)
    local method = getnamecallmethod()
    local script = getcallingscript()

    local Args = { ... }

    if Args ~= nil and (method == "FireServer" or method == "InvokeServer") then
        if not JSON.macro_playback and  JSON.macro_record then
            repeat
                task.wait()
            until player.Money ~= nil

            local money = nil

            money = GetMoney()
            if self.Name ~= "StopSetting" or self.Name ~= "Vote" then
                if self.Name == "Sell" then
                    table.insert(Macros[JSON.macro_profile], {
                        [1] = timeElapsed(),
                        [2] = {
                            [1] = Args[1].Name,
                            [2] = CFrameToTable(Args[1].HumanoidRootPart.CFrame),
                        },
                        [3] = money,
                        [4] = self.Name
                    })
                end
             
                if self.Name == "Target" then
                    table.insert(Macros[JSON.macro_profile], {
                        [1] = timeElapsed(),
                        [2] = {
                            [1] = Args[1].Name,
                            [2] = CFrameToTable(Args[1].HumanoidRootPart.CFrame),
                        },
                        [3] = money,
                        [4] = self.Name
                    })
                end

                if self.Name == "SummonTower" then
                    table.insert(Macros[JSON.macro_profile], {
                        [1] = timeElapsed(),
                        [2] = {
                            [1] = Args[1],
                            [2] = CFrameToTable(Args[2])

                        },
                        [3] = money,
                        [4] = self.Name
                    })
                end
                if self.Name == "Upgrade" then
                    table.insert(Macros[JSON.macro_profile], {
                        [1] = timeElapsed(),
                        [2] = {
                            [1] = Args[1].Name,
                            [2] = CFrameToTable(Args[1].HumanoidRootPart.CFrame),
                        },
                        [3] = money,
                        [4] = self.Name
                    })
                end

                task.spawn(function()
                    Save()
                end)
            end
        end
    end

    return namecall_original(self, ...)
end)


if not workspace.Lobby then
    if JSON.auto_join_game then
        task.spawn(JoinGame)
    end

    if JSON.macro_playback then
        task.spawn(MacroPlayback)
    end
    task.spawn(StartMacroTimer)
else
    if JSON.auto_join_game then
        task.spawn(JoinGame)
    end
end
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "Sapphire Hub",
    LoadingTitle = "FNTD",
    LoadingSubtitle = "by saintfulls",
    ConfigurationSaving = {
        Enabled = false,
        FolderName = "SapphireHub/FNTD/Settings/",
        FileName = game.Players.LocalPlayer.UserId .. ".json"
    },
    Discord = {
        Enabled = false,
        Invite = "noinvitelink",
        RememberJoins = true
    },
    KeySystem = false,
    KeySettings = {
        Title = "Untitled",
        Subtitle = "Key System",
        Note = "No method of obtaining the key is provided",
        FileName = "Key",
        SaveKey = true,
        GrabKeyFromSite = false,
        Key = { "Hello" }
    }
})


local Tabs = {
    Lobby = Window:CreateTab("Lobby", 4483362458),
    Macro = Window:CreateTab("Macro", 4483362458),
    MacroMaps = Window:CreateTab("Macro Maps", 4483362458),
    Webhook = Window:CreateTab("Webhook", 4483362458),
    Miscellaneous = Window:CreateTab("Miscellaneous", 4483362458)
}




local Lobby_Main = Tabs.Lobby:CreateSection("Modes")

Tabs.Lobby:CreateDropdown({
    Name = "Game modes",
    Options = { "Story", "Endless"},
    CurrentOption = { JSON.auto_join_mode },
    MultipleOptions = false,
    Flag = "Dropdown1",
    Callback = function(Option)
        JSON.auto_join_mode = Option[1]
        Save()
    end
})

Tabs.Lobby:CreateToggle({
    Name = "Auto Join Game",
    CurrentValue = JSON.auto_join_game,
    Flag = "Toggle1",
    Callback = function(value)
        JSON.auto_join_game = value
        Save()

        if value then
            task.spawn(JoinGame)
        end
    end
})

Tabs.Lobby:CreateSection("Levels")

Tabs.Lobby:CreateDropdown({
    Name = "Story level",
    Options = { "1", "2", "3", "4", "5", "6"},
    CurrentOption = { JSON.auto_join_level },
    MultipleOptions = false,
    Flag = "Dropdown1",
    Callback = function(Option)
        JSON.auto_join_level = Option[1]
        Save()
    end
})

Tabs.Lobby:CreateDropdown({
    Name = "levels",
    Options = { "1", "2", "3", "4", "5", "6"},
    CurrentOption = { JSON.auto_join_story_level },
    MultipleOptions = false,
    Flag = "Dropdown1",
    Callback = function(Option)
        JSON.auto_join_story_level = Option[1]
        Save()
    end
})



local Lobby_Second = Tabs.Lobby:CreateSection("Story Settings")

Tabs.Lobby:CreateToggle({
    Name = "Auto Next Level",
    CurrentValue = JSON.auto_join_increment_story,
    Flag = "Toggle1",
    Callback = function(value)
        JSON.auto_join_increment_story = value
        Save()
    end
})

Tabs.Lobby:CreateToggle({
    Name = "Auto Replay",
    CurrentValue = JSON.auto_replay,
    Flag = "Toggle1",
    Callback = function(value)
        JSON.auto_replay = value
        Save()
      
    end
})

Tabs.Lobby:CreateSlider({
    Name = "Auto Join Delay",
    Range = { 0, 60 },
    Increment = 1,
    Suffix = "seconds",
    CurrentValue = JSON.auto_join_delay,
    Flag = "Slider1",
    Callback = function(Value)
        JSON.auto_join_delay = Value
        Save()
    end
})

local Macro_Main = Tabs.Macro:CreateSection("Main")

local profile_list = {}
for i, _ in pairs(Macros) do
    table.insert(profile_list, i)
end

if Macros[JSON.macro_profile] == nil then
    for _, v in pairs(profile_list) do
        if v ~= nil then
            JSON.macro_profile = v
            break
        end
    end
end

local Macro_list = Tabs.Macro:CreateDropdown({
    Name = "Macro List",
    Options = profile_list,
    CurrentOption = { JSON.macro_profile },
    MultipleOptions = false,
    Callback = function(Option)
        JSON.macro_profile = Option[1]
        if Macros[JSON.macro_profile] == nil then
            Macros[JSON.macro_profile] = {}
        end

        Save()

        Rayfield:Notify({
            Title = "Macro Profile",
            Content = "Using " .. JSON.macro_profile,
            Duration = 6.5,
            Image = 4483362458,
            Actions = {    -- Notification Buttons

                Ignore = { -- Duplicate this table (or remove it) to add and remove buttons to the notification.
                    Name = "Okay!",
                    Callback = function()

                    end
                }

            }
        })
    end
})

local Macro_Record = Tabs.Macro:CreateToggle({
    Name = "Record Macro",
    CurrentValue = JSON.macro_record,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        JSON.macro_record = Value
        Save()
        if not Value then
            Rayfield:Notify({
                Title = "Macro",
                Content = "Saved Macro :" .. JSON.macro_profile,
                Duration = 6.5,
                Image = 4483362458,
                Actions = {    -- Notification Buttons

                    Ignore = { -- Duplicate this table (or remove it) to add and remove buttons to the notification.
                        Name = "Okay!",
                        Callback = function()

                        end
                    }

                }
            })
        else
            Rayfield:Notify({
                Title = "Macro",
                Content = "Recording Macro :" .. JSON.macro_profile,
                Duration = 6.5,
                Image = 4483362458,
                Actions = { -- Notification Buttons

                    Ignore = {
                        Name = "Okay!",
                        Callback = function()

                        end
                    }

                }
            })
        end
    end
})

local Macro_Playback = Tabs.Macro:CreateToggle({
    Name = "Macro Playback",
    CurrentValue = JSON.macro_playback,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        JSON.macro_playback = Value
        Save()

        if Value then
            task.spawn(MacroPlayback)
        end
    end
})

Tabs.Macro:CreateSection("Macro Profile")
local profile_name = ""

local profile_name_text = Tabs.Macro:CreateInput({
    Name = "Profile Name",
    PlaceholderText = "Enter Name",
    RemoveTextAfterFocusLost = false,
    Callback = function(Text)
        if Text ~= "" then
            profile_name = Text
        end
    end
})

Tabs.Macro:CreateButton({
    Name = "Create Profile",
    Callback = function()
        if Macros[profile_name] ~= nil then
            Rayfield:Notify({
                Title = "Macro Profile",
                Content = "Macro already exists :" .. profile_name,
                Duration = 6.5,
                Image = 4483362458,
                Actions = {

                    Ignore = {
                        Name = "Okay!",
                        Callback = function()

                        end
                    }

                }
            })
        else
            Macros[profile_name] = {}
            JSON.macro_profile = profile_name

            Save()

            table.insert(profile_list, profile_name)

            Macro_list:Refresh(profile_list)
            Macro_list:Set(JSON.macro_profile)
        end
    end
})

Tabs.Macro:CreateButton({
    Name = "Clear Profile",
    Callback = function()
        Macros[JSON.macro_profile] = {}
        Save()
    end
})

Tabs.Macro:CreateButton({
    Name = "Delete Profile",
    Callback = function()
        if table.getn(profile_list) == 1 then
            Rayfield:Notify({
                Title = "Macro Profile",
                Content = "Can't delete last profile",
                Duration = 6.5,
                Image = 4483362458,
                Actions = {

                    Ignore = {
                        Name = "Okay!",
                        Callback = function()

                        end
                    }

                }
            })
            return
        else
            local removed_profile_name = JSON.macro_profile
            delfile(folder_name .. "/" .. JSON.macro_profile .. ".json")
            Macros[JSON.macro_profile] = nil
            table.remove(profile_list, table.find(profile_list, removed_profile_name))

            for _, v in pairs(profile_list) do
                if v ~= nil then
                    JSON.macro_profile = v
                    break
                end
            end

            Save()

            Macro_list:Refresh(profile_list)
            Macro_list:Set(JSON.macro_profile)
        end
    end
})

local Macro_Settings = Tabs.Macro:CreateSection("Playback Settings")

Tabs.Macro:CreateToggle({
    Name = "Summon Unit",
    CurrentValue = JSON.macro_summon,
    Flag = "Toggle1",
    Callback = function(Value)
        JSON.macro_summon = Value
        Save()
    end
})

Tabs.Macro:CreateToggle({
    Name = "Sell Unit",
    CurrentValue = JSON.macro_sell,
    Flag = "Toggle1",
    Callback = function(Value)
        JSON.macro_sell = Value
        Save()
    end
})

Tabs.Macro:CreateToggle({
    Name = "Upgrade Unit",
    CurrentValue = JSON.macro_upgrade,
    Flag = "Toggle1",
    Callback = function(Value)
        JSON.macro_upgrade = Value
        Save()
    end
})

Tabs.Macro:CreateToggle({
    Name = "Change Unit Priority",
    CurrentValue = JSON.macro_changepriority,
    Flag = "Toggle1",
    Callback = function(Value)
        JSON.macro_changepriority = Value
        Save()
    end
})

Tabs.Macro:CreateToggle({
    Name = "Skip Wave",
    CurrentValue = JSON.macro_skipwave,
    Flag = "Toggle1",
    Callback = function(Value)
        JSON.macro_skipwave = Value
        Save()
    end
})
